# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xIbQvQaV5baiJlYIw_Ka2UrV-c0Z4bCr
"""


import pandas as pd
import streamlit as st
from io import StringIO

# ======================
# Load Data
# ======================
data = pd.read_csv('song_dataset.csv')
data = data[['user', 'title', 'artist_name']].drop_duplicates()

unique_users = data['user'].unique()

# ======================
# Recommendation Logic
# ======================
def recommend_unheard_songs(user_id, listened_songs, top_n=5):
    # Filter out songs the user has already listened to
    unheard_songs = data[(data['user'] == user_id) & (~data['title'].isin(listened_songs))]

    # If user_id doesn't exist or no unheard songs, return None
    if unheard_songs.empty:
        return None

    recommendations = unheard_songs[['title', 'artist_name']].drop_duplicates().head(top_n)
    return recommendations

# ======================
# Custom CSS & Audio
# ======================
# You can replace the background image URL with one of your choice
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;700&display=swap');

    html, body, [class*="css"]  {
        font-family: 'Montserrat', sans-serif;
        background: url('https://images.unsplash.com/photo-1601581986152-7a67d253721f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1680&q=80') no-repeat center center fixed;
        background-size: cover;
        color: #FFFFFF;
    }

    /* Dark overlay to improve text visibility */
    .main {
        background: rgba(0,0,0,0.6);
        padding: 2rem;
    }

    /* Style the title to look more like a Spotify theme */
    h1, h2, h3, h4, h5, h6 {
        color: #1DB954; /* Spotify green */
    }

    .stSelectbox>div>div>div>label,
    .stMultiSelect>div>div>label {
        color: #FFFFFF;
        font-weight: 700;
    }

    /* Style the buttons */
    .stButton>button {
        background-color: #1DB954;
        color: #FFF;
        border:none;
        border-radius: 25px;
        padding: 0.5rem 1.5rem;
        font-size: 1rem;
        font-weight: 700;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #1ed760;
        cursor: pointer;
    }

    .css-1cpxqw2 {
        color: white;
    }

    .stDataFrame {
        background-color: rgba(0,0,0,0.7);
        border: none;
    }

    /* Adjust dataframe text color */
    .stDataFrame tbody td {
        color: #fff;
    }

    .stDataFrame thead tr th {
        color: #1DB954;
    }

    </style>
""", unsafe_allow_html=True)

# Add background music (must have background_music.mp3 in the same directory)
st.markdown("""
    <audio autoplay loop hidden>
        <source src="background_music.mp3" type="audio/mp3">
    </audio>
""", unsafe_allow_html=True)

# ======================
# App Layout
# ======================
st.title("Your Personal Song Recommendation Engine")

st.write("Get song recommendations you haven't heard before, styled with a Spotify-inspired theme.")

# Step 1: Select User
selected_user = st.selectbox("Select User ID:", options=unique_users)

# Step 2: User's listened songs
user_listened_songs = data[data['user'] == selected_user]['title'].unique()

listened_songs_input = st.multiselect(
    "Select songs you have already listened to:",
    options=user_listened_songs,
    default=[]
)

# Recommend button
if st.button("Get Recommendations"):
    if len(listened_songs_input) == 0:
        st.warning("Please select at least one song you've listened to.")
    else:
        recommended = recommend_unheard_songs(selected_user, listened_songs_input)
        if recommended is not None and not recommended.empty:
            st.success("Recommended Songs:")
            st.dataframe(recommended.reset_index(drop=True))
        else:
            st.error(f"No unheard songs available for user: {selected_user}")
